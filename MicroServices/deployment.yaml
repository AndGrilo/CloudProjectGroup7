apiVersion: v1
kind: Service
metadata:
  name: mongo
spec:
  selector:
    app: mongo
  ports:
    - name: bd
      port: 27017
      targetPort: 27017
  type: LoadBalancer
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mongo
spec:
  selector:
    matchLabels:
      app: mongo
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: mongo
    spec:
      containers:
        - image: mongo
          name: mongo
          resources:
            requests:
              memory: "500Mi"
            limits:
              memory: "1000Mi"
          envFrom:
            - secretRef:
                name: mongo-secret
          ports:
            - containerPort: 27017
              name: mongo
          volumeMounts:
            - name: mongo-persistent-storage
              mountPath: /data/db
      volumes:
        - name: mongo-persistent-storage
          persistentVolumeClaim:
            claimName: mongo-pv-claim
---
apiVersion: "apps/v1"
kind: "Deployment"
metadata:
  name: "adminoperationsserver"
  labels:
    app: "adminoperationsserver"
spec:
  replicas: 1
  strategy:
    type: "RollingUpdate"
    rollingUpdate:
      maxSurge: 30%
      maxUnavailable: 30%
  revisionHistoryLimit: 5
  selector:
    matchLabels:
      app: "adminoperationsserver"
  template:
    metadata:
      labels:
        app: "adminoperationsserver"
    spec:
      containers:
        - name: "adminoperationsserver"
          image: "gcr.io/${PROJECT_ID}/adminoperationsserver"
          ports:
            - containerPort: 50051
---
apiVersion: "v1"
kind: "Service"
metadata:
  name: "adminoperationsserver"
spec:
  type: ClusterIP
  selector:
    app: "adminoperationsserver"
  ports:
    - name: "server"
      port: 50051
      targetPort: 50051
    - name: prometheus
      protocol: TCP
      port: 51051
      targetPort: 51051
---
apiVersion: "apps/v1"
kind: "Deployment"
metadata:
  name: "adminoperationsapi"
  labels:
    app: "adminoperationsapi"
spec:
  replicas: 1
  strategy:
    type: "RollingUpdate"
    rollingUpdate:
      maxSurge: 30%
      maxUnavailable: 30%
  revisionHistoryLimit: 5
  selector:
    matchLabels:
      app: "adminoperationsapi"
  template:
    metadata:
      labels:
        app: "adminoperationsapi"
    spec:
      containers:
        - name: "adminoperationsapi"
          image: "gcr.io/${PROJECT_ID}/adminoperationsapi"
          ports:
            - containerPort: 5003
---
apiVersion: "v1"
kind: "Service"
metadata:
  name: "adminoperationsapi"
spec:
  selector:
    app: "adminoperationsapi"
  ports:
    - name: "api"
      port: 5003
      targetPort: 5003
  type: NodePort
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: usermanagementserver-deployment
  labels:
    app: usermanagementserver
spec:
  replicas: 1
  selector:
    matchLabels:
      app: usermanagementserver
  strategy:
    type: "RollingUpdate"
    rollingUpdate:
      maxSurge: 30%
      maxUnavailable: 30%
  revisionHistoryLimit: 5
  template:
    metadata:
      labels:
        app: usermanagementserver
    spec:
      containers:
        - name: usermanagementserver
          image: "gcr.io/${PROJECT_ID}/usermanagementserver"
          ports:
            - containerPort: 50052
---
kind: Service
apiVersion: v1
metadata:
  name: usermanagementserversvc
spec:
  type: ClusterIP
  selector:
    app: usermanagementserver
  ports:
    - name: server
      port: 50052
      targetPort: 50052
    - name: prometheus
      protocol: TCP
      port: 51052
      targetPort: 51052
---
apiVersion: "apps/v1"
kind: "Deployment"
metadata:
  name: "usermanagementapi"
  labels:
    app: "usermanagementapi"
spec:
  replicas: 1
  strategy:
    type: "RollingUpdate"
    rollingUpdate:
      maxSurge: 30%
      maxUnavailable: 30%
  selector:
    matchLabels:
      app: "usermanagementapi"
  template:
    metadata:
      labels:
        app: "usermanagementapi"
    spec:
      containers:
        - name: "usermanagementapi"
          image: "gcr.io/${PROJECT_ID}/usermanagementapi"
          ports:
            - containerPort: 5004
---
apiVersion: "v1"
kind: "Service"
metadata:
  name: "usermanagementapi"
spec:
  selector:
    app: "usermanagementapi"
  ports:
    - name: "api"
      port: 5004
      targetPort: 5004
  type: NodePort
---
apiVersion: "apps/v1"
kind: "Deployment"
metadata:
  name: "libraryserver"
  labels:
    app: "libraryserver"
spec:
  replicas: 1
  strategy:
    type: "RollingUpdate"
    rollingUpdate:
      maxSurge: 30%
      maxUnavailable: 30%
  revisionHistoryLimit: 5
  selector:
    matchLabels:
      app: "libraryserver"
  template:
    metadata:
      labels:
        app: "libraryserver"
    spec:
      containers:
        - name: "libraryserver"
          image: "gcr.io/${PROJECT_ID}/libraryserver"
          ports:
            - containerPort: 50053
---
apiVersion: "v1"
kind: "Service"
metadata:
  name: "libraryserver"
spec:
  selector:
    app: "libraryserver"
  ports:
    - name: "server"
      port: 50053
      targetPort: 50053
    - name: prometheus
      protocol: TCP
      port: 51053
      targetPort: 51053
---
apiVersion: "apps/v1"
kind: "Deployment"
metadata:
  name: "libraryapi"
  labels:
    app: "libraryapi"
spec:
  replicas: 1
  strategy:
    type: "RollingUpdate"
    rollingUpdate:
      maxSurge: 30%
      maxUnavailable: 30%
  revisionHistoryLimit: 5
  selector:
    matchLabels:
      app: "libraryapi"
  template:
    metadata:
      labels:
        app: "libraryapi"
    spec:
      containers:
        - name: "libraryapi"
          image: "gcr.io/${PROJECT_ID}/libraryapi"
          ports:
            - containerPort: 5001
---
apiVersion: "v1"
kind: "Service"
metadata:
  name: "libraryapi"
spec:
  selector:
    app: "libraryapi"
  ports:
    - name: "api"
      port: 5001
      targetPort: 5001
  type: NodePort
---
apiVersion: "apps/v1"
kind: "Deployment"
metadata:
  name: "wishlistserver"
  labels:
    app: "wishlistserver"
spec:
  replicas: 1
  strategy:
    type: "RollingUpdate"
    rollingUpdate:
      maxSurge: 30%
      maxUnavailable: 30%
  revisionHistoryLimit: 5
  selector:
    matchLabels:
      app: "wishlistserver"
  template:
    metadata:
      labels:
        app: "wishlistserver"
    spec:
      containers:
        - name: "wishlistserver"
          image: "gcr.io/${PROJECT_ID}/wishlistserver"
          ports:
            - containerPort: 50058
---
apiVersion: "v1"
kind: "Service"
metadata:
  name: "wishlistserver"
spec:
  selector:
    app: "wishlistserver"
  ports:
    - name: "server"
      port: 50058
      targetPort: 50058
    - name: prometheus
      protocol: TCP
      port: 51058
      targetPort: 51058
---
apiVersion: "apps/v1"
kind: "Deployment"
metadata:
  name: "wishlistapi"
  labels:
    app: "wishlistapi"
spec:
  replicas: 1
  strategy:
    type: "RollingUpdate"
    rollingUpdate:
      maxSurge: 30%
      maxUnavailable: 30%
  selector:
    matchLabels:
      app: "wishlistapi"
  template:
    metadata:
      labels:
        app: "wishlistapi"
    spec:
      containers:
        - name: "wishlistapi"
          image: "gcr.io/${PROJECT_ID}/wishlistapi"
          ports:
            - containerPort: 5002
---
apiVersion: "v1"
kind: "Service"
metadata:
  name: "wishlistapi"
spec:
  selector:
    app: "wishlistapi"
  ports:
    - name: "api"
      port: 5002
      targetPort: 5002
  type: NodePort
---
apiVersion: "apps/v1"
kind: "Deployment"
metadata:
  name: "suggestionsserver"
  labels:
    app: "suggestionsserver"
spec:
  replicas: 1
  strategy:
    type: "RollingUpdate"
    rollingUpdate:
      maxSurge: 30%
      maxUnavailable: 30%
  revisionHistoryLimit: 5
  selector:
    matchLabels:
      app: "suggestionsserver"
  template:
    metadata:
      labels:
        app: "suggestionsserver"
    spec:
      containers:
        - name: "suggestionsserver"
          image: "gcr.io/${PROJECT_ID}/suggestionsserver"
          ports:
            - containerPort: 50059
---
apiVersion: "v1"
kind: "Service"
metadata:
  name: "suggestionsserver"
spec:
  selector:
    app: "suggestionsserver"
  ports:
    - name: "server"
      port: 50059
      targetPort: 50059
    - name: prometheus
      protocol: TCP
      port: 51059
      targetPort: 51059
---
apiVersion: "apps/v1"
kind: "Deployment"
metadata:
  name: "suggestionsapi"
  labels:
    app: "suggestionsapi"
spec:
  replicas: 1
  strategy:
    type: "RollingUpdate"
    rollingUpdate:
      maxSurge: 30%
      maxUnavailable: 30%
  selector:
    matchLabels:
      app: "suggestionsapi"
  template:
    metadata:
      labels:
        app: "suggestionsapi"
    spec:
      containers:
        - name: "suggestionsapi"
          image: "gcr.io/${PROJECT_ID}/suggestionsapi"
          ports:
            - containerPort: 5008
---
apiVersion: "v1"
kind: "Service"
metadata:
  name: "suggestionsapi"
spec:
  selector:
    app: "suggestionsapi"
  ports:
    - name: "api"
      port: 5008
      targetPort: 5008
  type: NodePort
---
apiVersion: "apps/v1"
kind: "Deployment"
metadata:
  name: "searchesserver"
  labels:
    app: "searchesserver"
spec:
  replicas: 1
  strategy:
    type: "RollingUpdate"
    rollingUpdate:
      maxSurge: 30%
      maxUnavailable: 30%
  revisionHistoryLimit: 5
  selector:
    matchLabels:
      app: "searchesserver"
  template:
    metadata:
      labels:
        app: "searchesserver"
    spec:
      containers:
        - name: "searchesserver"
          image: "gcr.io/${PROJECT_ID}/searchesserver"
          ports:
            - containerPort: 50079
---
apiVersion: "v1"
kind: "Service"
metadata:
  name: "searchesserver"
spec:
  type: ClusterIP
  selector:
    app: "searchesserver"
  ports:
    - name: "server"
      port: 50079
      targetPort: 50079
    - name: prometheus
      protocol: TCP
      port: 51079
      targetPort: 51079
---
apiVersion: "apps/v1"
kind: "Deployment"
metadata:
  name: "searchesapi"
  labels:
    app: "searchesapi"
spec:
  replicas: 1
  strategy:
    type: "RollingUpdate"
    rollingUpdate:
      maxSurge: 30%
      maxUnavailable: 30%
  selector:
    matchLabels:
      app: "searchesapi"
  template:
    metadata:
      labels:
        app: "searchesapi"
    spec:
      containers:
        - name: "searchesapi"
          image: "gcr.io/${PROJECT_ID}/searchesapi"
          ports:
            - containerPort: 5078
---
apiVersion: "v1"
kind: "Service"
metadata:
  name: "searchesapi"
spec:
  selector:
    app: "searchesapi"
  ports:
    - name: "api"
      port: 5078
      targetPort: 5078
  type: NodePort
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: reviews-api-d
  labels:
    app: reviews-api
spec:
  replicas: 1
  strategy:
    type: "RollingUpdate"
    rollingUpdate:
      maxSurge: 30%
      maxUnavailable: 30%
  selector:
    matchLabels:
      app: reviews-api
  template:
    metadata:
      labels:
        app: reviews-api
    spec:
      containers:
      - name: reviews-api
        image: "gcr.io/${PROJECT_ID}/reviews-api"
        ports:
        - containerPort: 5012
---
apiVersion: v1
kind: Service
metadata:
  name: reviews-api-s
  labels:
    app: reviews-api
spec:
  selector:
    app: reviews-api
  ports:
    - name: http
      port: 5012
      targetPort: 5012
  type: NodePort
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: reviews-server-d
  labels:
    app: reviews-server
spec:
  replicas: 1
  strategy:
    type: "RollingUpdate"
    rollingUpdate:
      maxSurge: 30%
      maxUnavailable: 30%
  revisionHistoryLimit: 5
  selector:
    matchLabels:
      app: reviews-server
  template:
    metadata:
      labels:
        app: reviews-server
    spec:
      containers:
      - name: reviews-server
        image: "gcr.io/${PROJECT_ID}/reviews-server"
        ports:
        - containerPort: 50060
---
apiVersion: v1
kind: Service
metadata:
  name: reviews-server-s
  labels:
    app: reviews-server
spec:
  selector:
    app: reviews-server
  ports:
    - name: http
      port: 50060
      targetPort: 50060
    - name: prometheus
      protocol: TCP
      port: 51060
      targetPort: 51060
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: steam-ingress
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
spec:
  rules:
  - http:
      paths:
      - path: "/admin"
        pathType: Prefix
        backend:
          service:
            name: adminoperationsapi
            port:
              number: 5003
      - path: "/user"
        pathType: Prefix
        backend:
          service:
            name: usermanagementapi
            port:
              number: 5004
      - path: "/library"
        pathType: Prefix
        backend:
          service:
            name: libraryapi
            port:
              number: 5001
      - path: "/wishes"
        pathType: Prefix
        backend:
          service:
            name: wishlistapi
            port:
              number: 5002
      - path: "/suggestions"
        pathType: Prefix
        backend:
          service:
            name: suggestionsapi
            port:
              number: 5008
      - path: "/searches"
        pathType: Prefix
        backend:
          service:
            name: searchesapi
            port:
              number: 5078
      - path: "/reviews"
        pathType: Prefix
        backend:
          service:
            name: reviews-api-s
            port:
              number: 5012
     
